# serverless.yml

service: street-tagged-server

plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-domain-manager

custom:
  domain:
    dev: api-dev.streettagged.com
    prod: api.streettagged.com
  customDomain:
    basePath: ''
    domainName:  ${self:custom.domain.${opt:stage}}
    stage: ${opt:stage}
    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  environment:
    MONGO_DB: ${ssm:MONGO_DB_${opt:stage}}
    REGION: us-east-1
    USER_GROUP: ${ssm:Cognito_${opt:stage}}

functions:
  app:
    handler: index.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'

  getArt:
    handler: index.handler
    events:
      - http: 'GET /art/{proxy+}'
        cors: true

  getArtAll:
    handler: index.handler
    events:
      - http: 'GET /art'
        cors: true
    authorizer:
        type: COGNITO_USER_POOLS
        authorizerId:
            Ref: ApiGatewayAuthorizer

  searchArt:
    handler: index.handler
    events:
      - http: 'POST /search/art'
        cors: true

  createArt:
    handler: index.handler
    events:
      - http: 'POST /art'
        cors: true
    authorizer:
        type: COGNITO_USER_POOLS
        authorizerId:
            Ref: ApiGatewayAuthorizer

  pingAuth:
    handler: index.handler
    events:
      - http: 'GET /ping'
        cors: true
    authorizer:
        type: COGNITO_USER_POOLS
        authorizerId:
            Ref: ApiGatewayAuthorizer

resources:
  Resources:
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: regular-user-pool-${self:provider.stage}
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True

    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: regular-user-pool-client-${self:provider.stage}
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool

    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
